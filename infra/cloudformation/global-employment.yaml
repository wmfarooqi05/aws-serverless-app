AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for this Serverless application
Resources:
  CompanyHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-companyHandler
  ActivitiesHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-activitiesHandler
  TeamHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-teamHandler
  EmailHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-emailHandler
  NotificationHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-notificationHandler
  CognitoOAuthHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-cognitoOAuthHandler
  UtilsHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-utilsHandler
  PendingApprovalsHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-pendingApprovalsHandler
  ImportDataLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-importData
  BulkCognitoSignupLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-bulkCognitoSignup
  HandleDynamoStreamRecordsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-handleDynamoStreamRecords
  HandleEBSchedulerLambdaInvokeLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-handleEBSchedulerLambdaInvoke
  WebSocketHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-webSocketHandler
  BroadcastMessageLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-broadcastMessage
  GetAllWebSocketConnectionsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-getAllWebSocketConnections
  GoogleOauthHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-googleOauthHandler
  GoogleOauthCallbackHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-googleOauthCallbackHandler
  GetAllCalendarsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-getAllCalendars
  CreateMeetingLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-createMeeting
  ReceiveEmailHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-receiveEmailHandler
  EmployeeHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-employeeHandler
  SqsJobQueueInvokeHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-sqsJobQueueInvokeHandler
  UploadSignupBulkJobLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/global-employment-dev-uploadSignupBulkJob
  IamRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join
            - "-"
            - - global-employment
              - dev
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/global-employment-dev*:*
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/global-employment-dev*:*:*
              - Effect: Allow
                Action:
                  - "codedeploy:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "execute-api:ManageConnections"
                Resource:
                  - !Sub "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
              - Effect: Allow
                Action:
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListStreams"
                Resource:
                  - >-
                    arn:aws:dynamodb:ca-central-1:524073432557:table/Jobs/stream/2023-05-02T11:39:32.489
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - "arn:aws:sqs:ca-central-1:524073432557:EmailQueue"
                  - "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
      Path: /
      RoleName: !Join
        - "-"
        - - global-employment
          - dev
          - !Ref "AWS::Region"
          - lambdaRole
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
  CompanyHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/companyHandler.zip
      Handler: src/functions/companies/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-companyHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - CompanyHandlerLogGroup
  ActivitiesHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/activitiesHandler.zip
      Handler: src/functions/activities/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-activitiesHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - ActivitiesHandlerLogGroup
  TeamHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/teamHandler.zip
      Handler: src/functions/teams/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-teamHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - TeamHandlerLogGroup
  EmailHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/emailHandler.zip
      Handler: src/functions/emails/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-emailHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - "arn:aws:lambda:ca-central-1:524073432557:layer:image-layer-v1:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - EmailHandlerLogGroup
  NotificationHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/notificationHandler.zip
      Handler: src/functions/notifications/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-notificationHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - NotificationHandlerLogGroup
  CognitoOAuthHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/cognitoOAuthHandler.zip
      Handler: src/functions/auth/handler.preTokenGenerationHandler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-cognitoOAuthHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - CognitoOAuthHandlerLogGroup
  UtilsHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/utilsHandler.zip
      Handler: src/functions/utils/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-utilsHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - UtilsHandlerLogGroup
  PendingApprovalsHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/pendingApprovalsHandler.zip
      Handler: src/functions/pending_approvals/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-pendingApprovalsHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - PendingApprovalsHandlerLogGroup
  ImportDataLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/importData.zip
      Handler: src/functions/jobs/import.importData
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-importData
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - ImportDataLogGroup
  BulkCognitoSignupLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/bulkCognitoSignup.zip
      Handler: src/functions/jobs/bulkSignupUpload.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-bulkCognitoSignup
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - BulkCognitoSignupLogGroup
  HandleDynamoStreamRecordsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/handleDynamoStreamRecords.zip
      Handler: src/functions/jobs/dynamoDbStreamHandler.handleStreamRecords
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-handleDynamoStreamRecords
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - HandleDynamoStreamRecordsLogGroup
  HandleEBSchedulerLambdaInvokeLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/handleEBSchedulerLambdaInvoke.zip
      Handler: src/functions/reminders/handler.handleEBSchedulerLambdaInvoke
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-handleEBSchedulerLambdaInvoke
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - HandleEBSchedulerLambdaInvokeLogGroup
  WebSocketHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/webSocketHandler.zip
      Handler: src/functions/websocket/handler.webSocketHandler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-webSocketHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - WebSocketHandlerLogGroup
  BroadcastMessageLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/broadcastMessage.zip
      Handler: src/functions/websocket/handler.broadcastMessage
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-broadcastMessage
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - BroadcastMessageLogGroup
  GetAllWebSocketConnectionsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/getAllWebSocketConnections.zip
      Handler: src/functions/websocket/handler.getAllConnections
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-getAllWebSocketConnections
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - GetAllWebSocketConnectionsLogGroup
  GoogleOauthHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/googleOauthHandler.zip
      Handler: src/functions/google/oauth/handler.oauthHandler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-googleOauthHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - GoogleOauthHandlerLogGroup
  GoogleOauthCallbackHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/googleOauthCallbackHandler.zip
      Handler: src/functions/google/oauth/handler.googleOauthCallbackHandler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-googleOauthCallbackHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - GoogleOauthCallbackHandlerLogGroup
  GetAllCalendarsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/getAllCalendars.zip
      Handler: src/functions/google/calendar/handler.getAllCalendars
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-getAllCalendars
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - GetAllCalendarsLogGroup
  CreateMeetingLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/createMeeting.zip
      Handler: src/functions/google/calendar/handler.createMeeting
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-createMeeting
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - CreateMeetingLogGroup
  ReceiveEmailHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/receiveEmailHandler.zip
      Handler: src/functions/emails/handler.emailQueueInvokeHandler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-receiveEmailHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - "arn:aws:lambda:ca-central-1:524073432557:layer:image-layer-v1:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - ReceiveEmailHandlerLogGroup
  EmployeeHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/employeeHandler.zip
      Handler: src/functions/employees/express.handler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-employeeHandler
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - EmployeeHandlerLogGroup
  SqsJobQueueInvokeHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/sqsJobQueueInvokeHandler.zip
      Handler: src/functions/sqs/handler.sqsJobQueueInvokeHandler
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-sqsJobQueueInvokeHandler
      MemorySize: 1024
      Timeout: 30
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - "arn:aws:lambda:ca-central-1:524073432557:layer:googleapis_111_0_0:2"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - SqsJobQueueInvokeHandlerLogGroup
  UploadSignupBulkJobLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
        S3Key: >-
          serverless/global-employment/dev/1687216448028-2023-06-19T23:14:08.028Z/uploadSignupBulkJob.zip
      Handler: src/functions/jobs/bulkSignupProcess.uploadSignupBulkJob
      Runtime: nodejs18.x
      FunctionName: global-employment-dev-uploadSignupBulkJob
      MemorySize: 1024
      Timeout: 10
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
          REGION: ca-central-1
          STACK_NAME: dev
          JOB_QUEUE: job-queue-dev
          STAGE: dev
          TIMEOUT: "10"
          DB_HOSTNAME: >-
            global-employement-database.cyb3arxab5e4.ca-central-1.rds.amazonaws.com
          DB_NAME: geldbtest
          DB_USERNAME: postgres
          DB_PASSWORD: postgres_qasid123
          DB_PORT: "5432"
          EMPLOYEES_TABLE: employees
          ACTIVITIES_TABLE: activities
          COMPANIES_TABLE: companies
          PENDING_APPROVAL_TABLE: pending_approvals
          NOTIFICATIONS_TABLE: notifications
          REMINDERS_TABLE: reminders
          AUTH_TOKENS_TABLE: auth_tokens
          UPDATE_HISTORY_TABLE: update_history
          TEAMS_TABLE: teams
          ACCESS_PERMISSIONS_TABLE: access_permissions
          EMPLOYEE_COMPANY_INTERACTIONS_TABLE: employee_company_interactions
          TEAM_COMPANY_INTERACTIONS_TABLE: team_company_interactions
          JOBS_DYNAMO_TABLE: Jobs
          DEPLOYMENT_BUCKET: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
          ELASTIC_CACHE_SERVER: >-
            redis://gel-api-dev-elastic-cache.ufa09u.ng.0001.cac1.cache.amazonaws.com:6379
          APIG_WS_API_ID: 2tcizg95hl
          AWS_SCHEDULER_REGION: ca-central-1
          REMINDER_TARGET_ROLE_ARN: "arn:aws:iam::524073432557:role/gel-api-dev-ca-central-1-lambdaRole"
          REMINDER_SCHEDULER_GROUP_ARN: >-
            arn:aws:scheduler:ca-central-1:524073432557:schedule-group/activity_scheduler
          REMINDER_SCHEDULER_GROUP_NAME: activity_scheduler
          REMINDER_TARGET_LAMBDA: >-
            arn:aws:lambda:ca-central-1:524073432557:function:gel-api-dev-handleEBSchedulerLambdaInvoke
          JOB_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          MAIL_QUEUE_ARN: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
          ConnectionTableName: Connections
          ConnectionTablePartitionKey: employeeId
          APP_BASE_URL: "https://ijbw189cib.execute-api.ca-central-1.amazonaws.com"
          VPC_ID: vpc-05126227d046548e1
          PRIVATE_SUBNET_1: subnet-0bf9443e724778d81
          PRIVATE_SUBNET_2: subnet-029afa431f7f325f6
          PRIVATE_SUBNET_3: subnet-0553628384d3adf0a
          PUBLIC_SUBNET_1: subnet-02752e6de3a0e8a16
          PUBLIC_SUBNET_2: subnet-0803209af3915f116
          VPC_SECURITY_GROUP: sg-0f35fcd0a25a50f4e
          GOOGLE_OAUTH_CLIENT_ID: >-
            512301118477-fnuaisl7mcqdk8iirtrau4c25suedtot.apps.googleusercontent.com
          GOOGLE_OAUTH_CLIENT_SECRET: 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
          JOBS_FOLDER: jobs
          AWS_ACCOUNT_ID: "524073432557"
          MAIL_QUEUE_NAME: EmailQueue
          COGNITO_USER_POOL_ID: ca-central-1_0BjGZxtC1
          JOB_QUEUE_NAME: job_queue_dev
          CANADA_DEFAULT_TIMEZONE: America/Toronto
          COGNITO_CLIENT_ID: 2abd3pabbdnhknm2m6l238cp82
          USE_LOCAL_SQS: "true"
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0f35fcd0a25a50f4e
        SubnetIds:
          - subnet-0bf9443e724778d81
          - subnet-029afa431f7f325f6
          - subnet-0553628384d3adf0a
      Layers:
        - "arn:aws:lambda:ca-central-1:524073432557:layer:jobs-packages:5"
        - >-
          arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    DependsOn:
      - UploadSignupBulkJobLogGroup
  NotificationHandlerLambdaVersion0csUU5ZrWdgYSNGUCYUSbXhRJTxLdDIg0uVc8cyx58:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref NotificationHandlerLambdaFunction
      CodeSha256: IChyC5tE1tWzI+G0QqTIyIgxpVax8kxqatbA4jQ66WE=
  UtilsHandlerLambdaVersionz9Av86qKDd1Plo5EGOJyOQXe1kw7ozcmDdkEkAeuR8:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref UtilsHandlerLambdaFunction
      CodeSha256: UEMnk7fBz3W25psnGw72wVeSQhj+/usZEa7yiaJQPFw=
  TeamHandlerLambdaVersionMzsOLfH3RQCXtJG4zidApytyMe73d4x74s90oitc8:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref TeamHandlerLambdaFunction
      CodeSha256: sRGL2FUZQLvzSt4PYrkcZ/HVYHeTLKjdIDt51NouxJg=
  CognitoOAuthHandlerLambdaVersionPYz6vKmBYsHkLRaosODsICFv3xh24OvNvpvWOuC2s:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref CognitoOAuthHandlerLambdaFunction
      CodeSha256: nVNn9lghG+Jn5ENIaDJSZ7KFU7QWh+IbAJhmcm/+tRs=
  HandleDynamoStreamRecordsLambdaVersionzdUbBGN7IU3trkvB8fGjnu57Qj3j3SR1qgjWDZewxU:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref HandleDynamoStreamRecordsLambdaFunction
      CodeSha256: ItctQ3kkvN3OWJv1TTL6DuIqB7ws6BjlQ6foQwo+PAA=
  BulkCognitoSignupLambdaVersionrQLJrg1opG5O8LD7Jbdl6BXCqHQZkq6bMJ5HLbCgAXQ:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref BulkCognitoSignupLambdaFunction
      CodeSha256: UdO4TPm2Ya1dmVPZKuH8fg4lfESDQFuzydyksr5H428=
  HandleEBSchedulerLambdaInvokeLambdaVersionrmASWVMBMuyBmdl0ffKfGb4pUynuP2s4LyKH9an2VQ:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref HandleEBSchedulerLambdaInvokeLambdaFunction
      CodeSha256: 4HBgnIgHEemzk9HySjK/Ah2W381iIgKHwdNw6KaBeE4=
  PendingApprovalsHandlerLambdaVersionVvFihwrOjijjVu0pkvO2vpspXjoe94US382aNBbmoTw:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref PendingApprovalsHandlerLambdaFunction
      CodeSha256: pGVsIc9qO+mwDJlVdSvnKSWrgo+qDeKUk0/98lfQ5sk=
  BroadcastMessageLambdaVersionjfv75LdI3LWrUBUoR1IxOuCHFsijBg46T7HmdVO8svI:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref BroadcastMessageLambdaFunction
      CodeSha256: Zuqv9mveUpsA3k2vTq/WWRtAQvLZCfDJJlGoxQ1oedM=
  WebSocketHandlerLambdaVersiontNQafWdQbjyqsPCK4ZmQc8vPNLanJuW2QkV5HKGEJI:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref WebSocketHandlerLambdaFunction
      CodeSha256: Zuqv9mveUpsA3k2vTq/WWRtAQvLZCfDJJlGoxQ1oedM=
  GetAllWebSocketConnectionsLambdaVersionigCznxwD7Y2cqn5zSarbQspBvaapIogFif5mMS8l7Js:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref GetAllWebSocketConnectionsLambdaFunction
      CodeSha256: Zuqv9mveUpsA3k2vTq/WWRtAQvLZCfDJJlGoxQ1oedM=
  GetAllCalendarsLambdaVersion7l4zwMJYJlwsnpDkxHId0t2BqXvrO15mv8dcUroChTo:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref GetAllCalendarsLambdaFunction
      CodeSha256: RIUqVhmcqXclDzFafaZJzBAWQgnv+Mo8+4RP/aZf/JQ=
  GoogleOauthHandlerLambdaVersionDS1vRjM5X80Z2jHsNPhrgFlYchjkku1FM4C781XGt4:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref GoogleOauthHandlerLambdaFunction
      CodeSha256: BxJ8aYrU1e0AkSIY+zHt8mQ/zdq+qalLeJ56le0/Cc4=
  GoogleOauthCallbackHandlerLambdaVersionrcgl0UQoWbMNytPK5sNLylRT68vgIM74BswF3rYM:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref GoogleOauthCallbackHandlerLambdaFunction
      CodeSha256: BxJ8aYrU1e0AkSIY+zHt8mQ/zdq+qalLeJ56le0/Cc4=
  EmployeeHandlerLambdaVersion0YYurQNWDtgwjyCxNPeR21HnJmxTLKshdN5VpbeWGLQ:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref EmployeeHandlerLambdaFunction
      CodeSha256: CjbspUjp3RyjxDpG6l3qNs2o5/tjkHeRNHnzYHBVcLc=
  CreateMeetingLambdaVersionho56xUohqzBUqnSysLXBysjc25e79dyyBmqDlDQ3Dg:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref CreateMeetingLambdaFunction
      CodeSha256: RIUqVhmcqXclDzFafaZJzBAWQgnv+Mo8+4RP/aZf/JQ=
  SqsJobQueueInvokeHandlerLambdaVersion4VeTXrvA08Zn4WVdWciLPOfvSoAoK7hgBab5HVY:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref SqsJobQueueInvokeHandlerLambdaFunction
      CodeSha256: Zye1C8SPYHgRshnkmyBce8jCDops172D0NBUHECwNNA=
  UploadSignupBulkJobLambdaVersion7SlsJLDmvpEmIiAThhXfNaKG2UZjDzEBjT6n5XoFP8:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref UploadSignupBulkJobLambdaFunction
      CodeSha256: zqfmXO1b/T2mkbApEhY6Ap+3S7rDAbm4qsCgXYLvKFE=
  CompanyHandlerLambdaVersionPj923voYAbSRq1gZQ2bpK0jRLbAD49PvS4iyuzgafY:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref CompanyHandlerLambdaFunction
      CodeSha256: z4o3lqgYlavP1umSw0v8I2IG8rlC02MbZSywzLcfBfY=
  ActivitiesHandlerLambdaVersionEWNb7KxUDivsnOpV3ETbd8HdTvzHeeO1Mc3NUNhB7AQ:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref ActivitiesHandlerLambdaFunction
      CodeSha256: bZG6dq9zRUA9uqE0Xmaak3O18svyMouC+eyuAGZWUDU=
  EmailHandlerLambdaVersionzElZjtAhfZA0V4KoJt7wKjvEbYK7VgrgdmrAArxlueg:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref EmailHandlerLambdaFunction
      CodeSha256: uQhsqPxb5PbesPsJz59VFeHY9vvdrh7CRHfkklwl9s8=
  ReceiveEmailHandlerLambdaVersionbQVjeYtkKRFEkJwGn7FhVf7i6cRbJEM4KLIwfJTw:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref ReceiveEmailHandlerLambdaFunction
      CodeSha256: eg8qfnB7Fm/KAN+PPRVXMkAZZAu6zA0/HPYdVXWbKOI=
  ImportDataLambdaVersionoKxAOA01A08NzBQKSJgI0seYOVQxSMQI7fJ6alG0Jxs:
    Type: "AWS::Lambda::Version"
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref ImportDataLambdaFunction
      CodeSha256: X0rxdMHtSgdK+eNaU1jtA+d8Ii8QW9zMNyKxi7UF2iE=
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: global-employment-dev
      EndpointConfiguration:
        Types:
          - EDGE
      Policy: ""
      MinimumCompressionSize: 1024
  ApiGatewayResourceCompany:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: company
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompany
      PathPart: "{companyId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarAssign:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVar
      PathPart: assign
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarContact:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVar
      PathPart: contact
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarContactContactidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVarContact
      PathPart: "{contactId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmail:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVar
      PathPart: email
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmailEmailidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmail
      PathPart: "{emailId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarEmployeeDashinteractions:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVar
      PathPart: employee-interactions
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarConvert:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVar
      PathPart: convert
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarNotes:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVar
      PathPart: notes
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarNotesNotesidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVarNotes
      PathPart: "{notesId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyCompanyidVarActivities:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanyCompanyidVar
      PathPart: activities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanyAssign:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompany
      PathPart: assign
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompanies:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: companies
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompaniesEmployee:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompanies
      PathPart: employee
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceCompaniesEmployeeEmployeeidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceCompaniesEmployee
      PathPart: "{employeeId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceContact:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: contact
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceContactContactidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceContact
      PathPart: "{contactId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivities:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: activities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivitiesStale:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceActivities
      PathPart: stale
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceMyDashactivities:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: my-activities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTopDashactivities:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: top-activities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTopDashactivitiesCompanyidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceTopDashactivities
      PathPart: "{companyId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceMyDashactivitiesDashbyDashstatusDashtime:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: my-activities-by-status-time
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivity:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: activity
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivityActivityidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceActivity
      PathPart: "{activityId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivityActivityidVarStatus:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceActivityActivityidVar
      PathPart: status
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivityActivityidVarStatusStatusVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceActivityActivityidVarStatus
      PathPart: "{status}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivityActivityidVarRemarks:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceActivityActivityidVar
      PathPart: remarks
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceActivityActivityidVarRemarksRemarksidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceActivityActivityidVarRemarks
      PathPart: "{remarksId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTeam:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: team
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTeamTeamidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceTeam
      PathPart: "{teamId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTeamTeamidVarAddDashemployee:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceTeamTeamidVar
      PathPart: add-employee
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTeamTeamidVarAddDashemployeeEmployeeidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceTeamTeamidVarAddDashemployee
      PathPart: "{employeeId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTeamTeamidVarRemoveDashemployee:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceTeamTeamidVar
      PathPart: remove-employee
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceTeamTeamidVarRemoveDashemployeeEmployeeidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceTeamTeamidVarRemoveDashemployee
      PathPart: "{employeeId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmails:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: emails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsTemplate:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmails
      PathPart: template
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsTemplateTemplateidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmailsTemplate
      PathPart: "{templateId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsTemplateTemplateidVarContent:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmailsTemplateTemplateidVar
      PathPart: content
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsSendDashbulk:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmails
      PathPart: send-bulk
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsTemplates:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmails
      PathPart: templates
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceSendDashemail:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: send-email
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsDashbyDashcontact:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: emails-by-contact
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailsDashbyDashcontactContactemailVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmailsDashbyDashcontact
      PathPart: "{contactEmail}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailDashlist:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: email-list
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailDashlistEmaillistidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmailDashlist
      PathPart: "{emailListId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailDashlistEmaillistidVarAddDashemails:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVar
      PathPart: add-emails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailDashlistEmaillistidVarDeleteDashemails:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVar
      PathPart: delete-emails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceSyncDashemails:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: sync-emails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceBulkDashemail:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: bulk-email
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmail:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: email
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailGetDashmyDashemails:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmail
      PathPart: get-my-emails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailEmailidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmail
      PathPart: "{emailId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmailMoveDashtoDashfolder:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmail
      PathPart: move-to-folder
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceNotification:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: notification
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceNotificationIdVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceNotification
      PathPart: "{id}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGenerateDashsignedDashurl:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: generate-signed-url
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourcePendingDashapproval:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: pending-approval
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourcePendingDashapprovalRequestidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourcePendingDashapproval
      PathPart: "{requestId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourcePendingDashapprovalRequestidVarApproveDashreject:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourcePendingDashapprovalRequestidVar
      PathPart: approve-reject
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceJobs:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: jobs
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceJobsImportdata:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceJobs
      PathPart: importData
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceJobsBulkDashsignup:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceJobs
      PathPart: bulk-signup
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceJobsBulkDashsignupDashupload:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceJobs
      PathPart: bulk-signup-upload
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceWebsocket:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: websocket
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceWebsocketBroadcast:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceWebsocket
      PathPart: broadcast
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceWebsocketGetDashconnections:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceWebsocket
      PathPart: get-connections
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogle:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: google
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleOauth:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogle
      PathPart: oauth
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleOauthExtendtoken:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogleOauth
      PathPart: extendToken
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleOauthGoogleoauthtokenscope:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogleOauth
      PathPart: googleOauthTokenScope
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleOauthCallback:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogleOauth
      PathPart: callback
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleCalendars:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogle
      PathPart: calendars
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleCalendar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogle
      PathPart: calendar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleCalendarCalendaridVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogleCalendar
      PathPart: "{calendarId}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceGoogleCalendarCalendaridVarMeeting:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGoogleCalendarCalendaridVar
      PathPart: meeting
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmployeesDashsummary:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: employees-summary
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmployees:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: employees
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmployee:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: employee
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmployeeProfile:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmployee
      PathPart: profile
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayResourceEmployeeProfileIdVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceEmployeeProfile
      PathPart: "{id}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompany
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompaniesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanies
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarAssignOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarAssign
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyAssignOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyAssign
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompaniesEmployeeEmployeeidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompaniesEmployeeEmployeeidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarContactOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContact
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmail
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailEmailidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmailEmailidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarEmployeeDashinteractionsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarEmployeeDashinteractions
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarConvertOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarConvert
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarNotesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarNotes
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarNotesNotesidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarNotesNotesidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodContactOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceContact
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodContactContactidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceContactContactidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyCompanyidVarActivitiesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarActivities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivitiesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodMyDashactivitiesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceMyDashactivities
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodTopDashactivitiesCompanyidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceTopDashactivitiesCompanyidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodMyDashactivitiesDashbyDashstatusDashtimeOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceMyDashactivitiesDashbyDashstatusDashtime
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivitiesStaleOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivitiesStale
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivityActivityidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivityOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivity
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivityActivityidVarStatusStatusVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarStatusStatusVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivityActivityidVarRemarksOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarRemarks
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodActivityActivityidVarRemarksRemarksidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarRemarksRemarksidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodTeamOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceTeam
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodTeamTeamidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodTeamTeamidVarAddDashemployeeEmployeeidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVarAddDashemployeeEmployeeidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodTeamTeamidVarRemoveDashemployeeEmployeeidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVarRemoveDashemployeeEmployeeidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailsTemplateOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailsTemplate
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailsSendDashbulkOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailsSendDashbulk
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailsTemplateTemplateidVarContentOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailsTemplateTemplateidVarContent
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailsTemplateTemplateidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailsTemplateTemplateidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailsTemplatesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailsTemplates
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodSendDashemailOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceSendDashemail
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailsDashbyDashcontactContactemailVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailsDashbyDashcontactContactemailVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailDashlistOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailDashlist
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailDashlistEmaillistidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailDashlistEmaillistidVarAddDashemailsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVarAddDashemails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailDashlistEmaillistidVarDeleteDashemailsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVarDeleteDashemails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodSyncDashemailsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceSyncDashemails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodBulkDashemailOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceBulkDashemail
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailGetDashmyDashemailsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailGetDashmyDashemails
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailEmailidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailEmailidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmailMoveDashtoDashfolderOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmailMoveDashtoDashfolder
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodNotificationOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,POST,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceNotification
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodNotificationIdVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceNotificationIdVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGenerateDashsignedDashurlOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGenerateDashsignedDashurl
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodPendingDashapprovalRequestidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourcePendingDashapprovalRequestidVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodPendingDashapprovalOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourcePendingDashapproval
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodPendingDashapprovalRequestidVarApproveDashrejectOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourcePendingDashapprovalRequestidVarApproveDashreject
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodJobsImportdataOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceJobsImportdata
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodJobsBulkDashsignupOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceJobsBulkDashsignup
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodWebsocketBroadcastOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceWebsocketBroadcast
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodWebsocketGetDashconnectionsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceWebsocketGetDashconnections
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGoogleOauthOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGoogleOauth
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGoogleOauthExtendtokenOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGoogleOauthExtendtoken
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGoogleOauthGoogleoauthtokenscopeOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGoogleOauthGoogleoauthtokenscope
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGoogleOauthCallbackOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGoogleOauthCallback
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGoogleCalendarsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGoogleCalendars
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGoogleCalendarCalendaridVarMeetingOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceGoogleCalendarCalendaridVarMeeting
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmployeesDashsummaryOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmployeesDashsummary
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmployeesOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmployees
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmployeeProfileOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmployeeProfile
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodEmployeeProfileIdVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceEmployeeProfileIdVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodJobsBulkDashsignupDashuploadOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceJobsBulkDashsignupDashupload
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodCompanyPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompany
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompaniesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanies
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarAssignPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarAssign
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyAssignPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyAssign
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompaniesEmployeeEmployeeidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompaniesEmployeeEmployeeidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarContactPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContact
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmail
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailEmailidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVarEmailEmailidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarEmployeeDashinteractionsPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarEmployeeDashinteractions
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarConvertPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarConvert
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarContactContactidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContactContactidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarNotesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarNotes
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarNotesPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarNotes
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarNotesNotesidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarNotesNotesidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarNotesNotesidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarNotesNotesidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodContactGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceContact
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarContactGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarContact
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodContactContactidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceContactContactidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CompanyHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CompanyHandlerLambdaPermissionApiGateway
  ApiGatewayMethodCompanyCompanyidVarActivitiesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceCompanyCompanyidVarActivities
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivitiesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivities
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodMyDashactivitiesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceMyDashactivities
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTopDashactivitiesCompanyidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTopDashactivitiesCompanyidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodMyDashactivitiesDashbyDashstatusDashtimeGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceMyDashactivitiesDashbyDashstatusDashtime
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivitiesStaleGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivitiesStale
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivity
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarStatusStatusVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarStatusStatusVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarRemarksPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarRemarks
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarRemarksRemarksidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarRemarksRemarksidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodActivityActivityidVarRemarksRemarksidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceActivityActivityidVarRemarksRemarksidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ActivitiesHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ActivitiesHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeam
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeam
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamTeamidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamTeamidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamTeamidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamTeamidVarAddDashemployeeEmployeeidVarPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVarAddDashemployeeEmployeeidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodTeamTeamidVarRemoveDashemployeeEmployeeidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceTeamTeamidVarRemoveDashemployeeEmployeeidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - TeamHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - TeamHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsTemplatePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsTemplate
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsSendDashbulkPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsSendDashbulk
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsTemplateTemplateidVarContentGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsTemplateTemplateidVarContent
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsTemplateTemplateidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsTemplateTemplateidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsTemplatesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsTemplates
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsTemplateDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsTemplate
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodSendDashemailPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceSendDashemail
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailsDashbyDashcontactContactemailVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailsDashbyDashcontactContactemailVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailDashlistGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailDashlist
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailDashlistPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailDashlist
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailDashlistEmaillistidVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailDashlistEmaillistidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailDashlistEmaillistidVarAddDashemailsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVarAddDashemails
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailDashlistEmaillistidVarDeleteDashemailsDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailDashlistEmaillistidVarDeleteDashemails
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodSyncDashemailsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceSyncDashemails
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodBulkDashemailPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceBulkDashemail
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailGetDashmyDashemailsGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailGetDashmyDashemails
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailEmailidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailEmailidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailEmailidVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailEmailidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmailMoveDashtoDashfolderPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmailMoveDashtoDashfolder
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmailHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmailHandlerLambdaPermissionApiGateway
  ApiGatewayMethodNotificationGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotification
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - NotificationHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - NotificationHandlerLambdaPermissionApiGateway
  ApiGatewayMethodNotificationPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotification
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - NotificationHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - NotificationHandlerLambdaPermissionApiGateway
  ApiGatewayMethodNotificationIdVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotificationIdVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - NotificationHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - NotificationHandlerLambdaPermissionApiGateway
  ApiGatewayMethodNotificationPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotification
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - NotificationHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - NotificationHandlerLambdaPermissionApiGateway
  ApiGatewayMethodGenerateDashsignedDashurlPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGenerateDashsignedDashurl
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - UtilsHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - UtilsHandlerLambdaPermissionApiGateway
  ApiGatewayMethodPendingDashapprovalRequestidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourcePendingDashapprovalRequestidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - PendingApprovalsHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - PendingApprovalsHandlerLambdaPermissionApiGateway
  ApiGatewayMethodPendingDashapprovalGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourcePendingDashapproval
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - PendingApprovalsHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - PendingApprovalsHandlerLambdaPermissionApiGateway
  ApiGatewayMethodPendingDashapprovalRequestidVarApproveDashrejectPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourcePendingDashapprovalRequestidVarApproveDashreject
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - PendingApprovalsHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - PendingApprovalsHandlerLambdaPermissionApiGateway
  ApiGatewayMethodJobsImportdataPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceJobsImportdata
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ImportDataLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ImportDataLambdaPermissionApiGateway
  ApiGatewayMethodJobsBulkDashsignupPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceJobsBulkDashsignup
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - BulkCognitoSignupLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - BulkCognitoSignupLambdaPermissionApiGateway
  ApiGatewayMethodWebsocketBroadcastPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceWebsocketBroadcast
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - BroadcastMessageLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - BroadcastMessageLambdaPermissionApiGateway
  ApiGatewayMethodWebsocketGetDashconnectionsGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceWebsocketGetDashconnections
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GetAllWebSocketConnectionsLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GetAllWebSocketConnectionsLambdaPermissionApiGateway
  ApiGatewayMethodGoogleOauthPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGoogleOauth
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GoogleOauthHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GoogleOauthHandlerLambdaPermissionApiGateway
  ApiGatewayMethodGoogleOauthExtendtokenPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGoogleOauthExtendtoken
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GoogleOauthHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GoogleOauthHandlerLambdaPermissionApiGateway
  ApiGatewayMethodGoogleOauthGoogleoauthtokenscopePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGoogleOauthGoogleoauthtokenscope
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GoogleOauthHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GoogleOauthHandlerLambdaPermissionApiGateway
  ApiGatewayMethodGoogleOauthCallbackGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGoogleOauthCallback
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GoogleOauthCallbackHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GoogleOauthCallbackHandlerLambdaPermissionApiGateway
  ApiGatewayMethodGoogleCalendarsGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGoogleCalendars
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GetAllCalendarsLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GetAllCalendarsLambdaPermissionApiGateway
  ApiGatewayMethodGoogleCalendarCalendaridVarMeetingPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGoogleCalendarCalendaridVarMeeting
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CreateMeetingLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CreateMeetingLambdaPermissionApiGateway
  ApiGatewayMethodEmployeesDashsummaryGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmployeesDashsummary
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmployeeHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmployeeHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmployeesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmployees
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmployeeHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmployeeHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmployeeProfileGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmployeeProfile
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmployeeHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmployeeHandlerLambdaPermissionApiGateway
  ApiGatewayMethodEmployeeProfileIdVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEmployeeProfileIdVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - EmployeeHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - EmployeeHandlerLambdaPermissionApiGateway
  ApiGatewayMethodJobsBulkDashsignupDashuploadPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceJobsBulkDashsignupDashupload
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - UploadSignupBulkJobLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - UploadSignupBulkJobLambdaPermissionApiGateway
  ApiGatewayDeployment1687216441972:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev
    DependsOn:
      - ApiGatewayMethodCompanyOptions
      - ApiGatewayMethodCompaniesOptions
      - ApiGatewayMethodCompanyCompanyidVarOptions
      - ApiGatewayMethodCompanyCompanyidVarAssignOptions
      - ApiGatewayMethodCompanyAssignOptions
      - ApiGatewayMethodCompaniesEmployeeEmployeeidVarOptions
      - ApiGatewayMethodCompanyCompanyidVarContactOptions
      - ApiGatewayMethodCompanyCompanyidVarContactContactidVarOptions
      - ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailOptions
      - >-
        ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailEmailidVarOptions
      - ApiGatewayMethodCompanyCompanyidVarEmployeeDashinteractionsOptions
      - ApiGatewayMethodCompanyCompanyidVarConvertOptions
      - ApiGatewayMethodCompanyCompanyidVarNotesOptions
      - ApiGatewayMethodCompanyCompanyidVarNotesNotesidVarOptions
      - ApiGatewayMethodContactOptions
      - ApiGatewayMethodContactContactidVarOptions
      - ApiGatewayMethodCompanyCompanyidVarActivitiesOptions
      - ApiGatewayMethodActivitiesOptions
      - ApiGatewayMethodMyDashactivitiesOptions
      - ApiGatewayMethodTopDashactivitiesCompanyidVarOptions
      - ApiGatewayMethodMyDashactivitiesDashbyDashstatusDashtimeOptions
      - ApiGatewayMethodActivitiesStaleOptions
      - ApiGatewayMethodActivityActivityidVarOptions
      - ApiGatewayMethodActivityOptions
      - ApiGatewayMethodActivityActivityidVarStatusStatusVarOptions
      - ApiGatewayMethodActivityActivityidVarRemarksOptions
      - ApiGatewayMethodActivityActivityidVarRemarksRemarksidVarOptions
      - ApiGatewayMethodTeamOptions
      - ApiGatewayMethodTeamTeamidVarOptions
      - ApiGatewayMethodTeamTeamidVarAddDashemployeeEmployeeidVarOptions
      - ApiGatewayMethodTeamTeamidVarRemoveDashemployeeEmployeeidVarOptions
      - ApiGatewayMethodEmailsTemplateOptions
      - ApiGatewayMethodEmailsSendDashbulkOptions
      - ApiGatewayMethodEmailsTemplateTemplateidVarContentOptions
      - ApiGatewayMethodEmailsTemplateTemplateidVarOptions
      - ApiGatewayMethodEmailsTemplatesOptions
      - ApiGatewayMethodSendDashemailOptions
      - ApiGatewayMethodEmailsDashbyDashcontactContactemailVarOptions
      - ApiGatewayMethodEmailDashlistOptions
      - ApiGatewayMethodEmailDashlistEmaillistidVarOptions
      - ApiGatewayMethodEmailDashlistEmaillistidVarAddDashemailsOptions
      - ApiGatewayMethodEmailDashlistEmaillistidVarDeleteDashemailsOptions
      - ApiGatewayMethodSyncDashemailsOptions
      - ApiGatewayMethodBulkDashemailOptions
      - ApiGatewayMethodEmailGetDashmyDashemailsOptions
      - ApiGatewayMethodEmailEmailidVarOptions
      - ApiGatewayMethodEmailMoveDashtoDashfolderOptions
      - ApiGatewayMethodNotificationOptions
      - ApiGatewayMethodNotificationIdVarOptions
      - ApiGatewayMethodGenerateDashsignedDashurlOptions
      - ApiGatewayMethodPendingDashapprovalRequestidVarOptions
      - ApiGatewayMethodPendingDashapprovalOptions
      - ApiGatewayMethodPendingDashapprovalRequestidVarApproveDashrejectOptions
      - ApiGatewayMethodJobsImportdataOptions
      - ApiGatewayMethodJobsBulkDashsignupOptions
      - ApiGatewayMethodWebsocketBroadcastOptions
      - ApiGatewayMethodWebsocketGetDashconnectionsOptions
      - ApiGatewayMethodGoogleOauthOptions
      - ApiGatewayMethodGoogleOauthExtendtokenOptions
      - ApiGatewayMethodGoogleOauthGoogleoauthtokenscopeOptions
      - ApiGatewayMethodGoogleOauthCallbackOptions
      - ApiGatewayMethodGoogleCalendarsOptions
      - ApiGatewayMethodGoogleCalendarCalendaridVarMeetingOptions
      - ApiGatewayMethodEmployeesDashsummaryOptions
      - ApiGatewayMethodEmployeesOptions
      - ApiGatewayMethodEmployeeProfileOptions
      - ApiGatewayMethodEmployeeProfileIdVarOptions
      - ApiGatewayMethodJobsBulkDashsignupDashuploadOptions
      - ApiGatewayMethodCompanyPost
      - ApiGatewayMethodCompaniesGet
      - ApiGatewayMethodCompanyCompanyidVarGet
      - ApiGatewayMethodCompanyCompanyidVarPut
      - ApiGatewayMethodCompanyCompanyidVarDelete
      - ApiGatewayMethodCompanyCompanyidVarAssignPut
      - ApiGatewayMethodCompanyAssignPut
      - ApiGatewayMethodCompaniesEmployeeEmployeeidVarGet
      - ApiGatewayMethodCompanyCompanyidVarContactPost
      - ApiGatewayMethodCompanyCompanyidVarContactContactidVarPut
      - ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailPost
      - >-
        ApiGatewayMethodCompanyCompanyidVarContactContactidVarEmailEmailidVarDelete
      - ApiGatewayMethodCompanyCompanyidVarEmployeeDashinteractionsPut
      - ApiGatewayMethodCompanyCompanyidVarConvertPut
      - ApiGatewayMethodCompanyCompanyidVarContactContactidVarDelete
      - ApiGatewayMethodCompanyCompanyidVarNotesGet
      - ApiGatewayMethodCompanyCompanyidVarNotesPost
      - ApiGatewayMethodCompanyCompanyidVarNotesNotesidVarPut
      - ApiGatewayMethodCompanyCompanyidVarNotesNotesidVarDelete
      - ApiGatewayMethodContactGet
      - ApiGatewayMethodCompanyCompanyidVarContactGet
      - ApiGatewayMethodContactContactidVarGet
      - ApiGatewayMethodCompanyCompanyidVarActivitiesGet
      - ApiGatewayMethodActivitiesGet
      - ApiGatewayMethodMyDashactivitiesGet
      - ApiGatewayMethodTopDashactivitiesCompanyidVarGet
      - ApiGatewayMethodMyDashactivitiesDashbyDashstatusDashtimeGet
      - ApiGatewayMethodActivitiesStaleGet
      - ApiGatewayMethodActivityActivityidVarGet
      - ApiGatewayMethodActivityPost
      - ApiGatewayMethodActivityActivityidVarPut
      - ApiGatewayMethodActivityActivityidVarStatusStatusVarPut
      - ApiGatewayMethodActivityActivityidVarDelete
      - ApiGatewayMethodActivityActivityidVarRemarksPost
      - ApiGatewayMethodActivityActivityidVarRemarksRemarksidVarPut
      - ApiGatewayMethodActivityActivityidVarRemarksRemarksidVarDelete
      - ApiGatewayMethodTeamPost
      - ApiGatewayMethodTeamGet
      - ApiGatewayMethodTeamTeamidVarGet
      - ApiGatewayMethodTeamTeamidVarPut
      - ApiGatewayMethodTeamTeamidVarDelete
      - ApiGatewayMethodTeamTeamidVarAddDashemployeeEmployeeidVarPost
      - ApiGatewayMethodTeamTeamidVarRemoveDashemployeeEmployeeidVarDelete
      - ApiGatewayMethodEmailsTemplatePost
      - ApiGatewayMethodEmailsSendDashbulkPost
      - ApiGatewayMethodEmailsTemplateTemplateidVarContentGet
      - ApiGatewayMethodEmailsTemplateTemplateidVarGet
      - ApiGatewayMethodEmailsTemplatesGet
      - ApiGatewayMethodEmailsTemplateDelete
      - ApiGatewayMethodSendDashemailPost
      - ApiGatewayMethodEmailsDashbyDashcontactContactemailVarGet
      - ApiGatewayMethodEmailDashlistGet
      - ApiGatewayMethodEmailDashlistPost
      - ApiGatewayMethodEmailDashlistEmaillistidVarPut
      - ApiGatewayMethodEmailDashlistEmaillistidVarDelete
      - ApiGatewayMethodEmailDashlistEmaillistidVarAddDashemailsPost
      - ApiGatewayMethodEmailDashlistEmaillistidVarDeleteDashemailsDelete
      - ApiGatewayMethodSyncDashemailsPost
      - ApiGatewayMethodBulkDashemailPost
      - ApiGatewayMethodEmailGetDashmyDashemailsGet
      - ApiGatewayMethodEmailEmailidVarGet
      - ApiGatewayMethodEmailEmailidVarDelete
      - ApiGatewayMethodEmailMoveDashtoDashfolderPut
      - ApiGatewayMethodNotificationGet
      - ApiGatewayMethodNotificationPost
      - ApiGatewayMethodNotificationIdVarGet
      - ApiGatewayMethodNotificationPut
      - ApiGatewayMethodGenerateDashsignedDashurlPost
      - ApiGatewayMethodPendingDashapprovalRequestidVarGet
      - ApiGatewayMethodPendingDashapprovalGet
      - ApiGatewayMethodPendingDashapprovalRequestidVarApproveDashrejectPost
      - ApiGatewayMethodJobsImportdataPost
      - ApiGatewayMethodJobsBulkDashsignupPost
      - ApiGatewayMethodWebsocketBroadcastPost
      - ApiGatewayMethodWebsocketGetDashconnectionsGet
      - ApiGatewayMethodGoogleOauthPost
      - ApiGatewayMethodGoogleOauthExtendtokenPost
      - ApiGatewayMethodGoogleOauthGoogleoauthtokenscopePost
      - ApiGatewayMethodGoogleOauthCallbackGet
      - ApiGatewayMethodGoogleCalendarsGet
      - ApiGatewayMethodGoogleCalendarCalendaridVarMeetingPost
      - ApiGatewayMethodEmployeesDashsummaryGet
      - ApiGatewayMethodEmployeesGet
      - ApiGatewayMethodEmployeeProfileGet
      - ApiGatewayMethodEmployeeProfileIdVarPut
      - ApiGatewayMethodJobsBulkDashsignupDashuploadPost
  CompanyHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CompanyHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  ActivitiesHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ActivitiesHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  TeamHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - TeamHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  EmailHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - EmailHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  NotificationHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - NotificationHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  UtilsHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - UtilsHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  PendingApprovalsHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - PendingApprovalsHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  ImportDataLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ImportDataLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  BulkCognitoSignupLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - BulkCognitoSignupLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  BroadcastMessageLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - BroadcastMessageLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  GetAllWebSocketConnectionsLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - GetAllWebSocketConnectionsLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  GoogleOauthHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - GoogleOauthHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  GoogleOauthCallbackHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - GoogleOauthCallbackHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  GetAllCalendarsLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - GetAllCalendarsLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  CreateMeetingLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CreateMeetingLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  EmployeeHandlerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - EmployeeHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  UploadSignupBulkJobLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - UploadSignupBulkJobLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
  WebsocketsApi:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: dev-global-employment-websockets
      RouteSelectionExpression: $request.body.action
      Description: Serverless Websockets
      ProtocolType: WEBSOCKET
  WebSocketHandlerWebsocketsIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref WebsocketsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":apigateway:"
          - !Ref "AWS::Region"
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt
            - WebSocketHandlerLambdaFunction
            - Arn
          - /invocations
  WebSocketHandlerLambdaPermissionWebsockets:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - WebsocketsApi
      - WebSocketHandlerLambdaFunction
    Properties:
      FunctionName: !GetAtt
        - WebSocketHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
  SconnectWebsocketsRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref WebsocketsApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WebSocketHandlerWebsocketsIntegration
  SdisconnectWebsocketsRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref WebsocketsApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WebSocketHandlerWebsocketsIntegration
  SdefaultWebsocketsRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref WebsocketsApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WebSocketHandlerWebsocketsIntegration
  WebsocketsDeploymentStage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref WebsocketsApi
      StageName: dev
      Description: Serverless Websockets
      DeploymentId: !Ref WebsocketsDeploymentdwnB2wINS7VZRi5tDwaURy8H20RB7GRlMg4xlRZr2Hw
  WebsocketsDeploymentdwnB2wINS7VZRi5tDwaURy8H20RB7GRlMg4xlRZr2Hw:
    Type: "AWS::ApiGatewayV2::Deployment"
    DependsOn:
      - SconnectWebsocketsRoute
      - SdisconnectWebsocketsRoute
      - SdefaultWebsocketsRoute
    Properties:
      ApiId: !Ref WebsocketsApi
      Description: Serverless Websockets
  HandleDynamoStreamRecordsEventSourceMappingDynamodbJobs:
    Type: "AWS::Lambda::EventSourceMapping"
    DependsOn:
      - IamRoleLambdaExecution
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: >-
        arn:aws:dynamodb:ca-central-1:524073432557:table/Jobs/stream/2023-05-02T11:39:32.489
      FunctionName: !GetAtt
        - HandleDynamoStreamRecordsLambdaFunction
        - Arn
      StartingPosition: TRIM_HORIZON
  CognitoUserPoolCacentral10BjGZxtC1:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: ca-central-1_0BjGZxtC1
      LambdaConfig:
        PreTokenGeneration: !GetAtt
          - CognitoOAuthHandlerLambdaFunction
          - Arn
    DependsOn:
      - CognitoOAuthHandlerLambdaFunction
  CognitoOAuthHandlerLambdaPermissionCognitoUserPoolCacentral10BjGZxtC1TriggerSourcePreTokenGeneration:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CognitoOAuthHandlerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt
        - CognitoUserPoolCacentral10BjGZxtC1
        - Arn
  ReceiveEmailHandlerEventSourceMappingSQSEmailQueue:
    Type: "AWS::Lambda::EventSourceMapping"
    DependsOn:
      - IamRoleLambdaExecution
    Properties:
      BatchSize: 10
      EventSourceArn: "arn:aws:sqs:ca-central-1:524073432557:EmailQueue"
      FunctionName: !GetAtt
        - ReceiveEmailHandlerLambdaFunction
        - Arn
      Enabled: true
  SqsJobQueueInvokeHandlerEventSourceMappingSQSJobqueuedev:
    Type: "AWS::Lambda::EventSourceMapping"
    DependsOn:
      - IamRoleLambdaExecution
    Properties:
      BatchSize: 10
      EventSourceArn: "arn:aws:sqs:ca-central-1:524073432557:job_queue_dev"
      FunctionName: !GetAtt
        - SqsJobQueueInvokeHandlerLambdaFunction
        - Arn
      Enabled: true
  MyBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
      PolicyDocument:
        Statement:
          - Sid: AllowLambdaToPutObjects
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "s3:PutObject"
            Resource: >-
              arn:aws:s3:::gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz/jobs/*
Outputs:
  ServerlessDeploymentBucketName:
    Value: gel-api-dev-serverlessdeploymentbucket-d34v77eas9bz
    Export:
      Name: sls-global-employment-dev-ServerlessDeploymentBucketName
  NotificationHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref NotificationHandlerLambdaVersion0csUU5ZrWdgYSNGUCYUSbXhRJTxLdDIg0uVc8cyx58
    Export:
      Name: sls-global-employment-dev-NotificationHandlerLambdaFunctionQualifiedArn
  UtilsHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref UtilsHandlerLambdaVersionz9Av86qKDd1Plo5EGOJyOQXe1kw7ozcmDdkEkAeuR8
    Export:
      Name: sls-global-employment-dev-UtilsHandlerLambdaFunctionQualifiedArn
  TeamHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref TeamHandlerLambdaVersionMzsOLfH3RQCXtJG4zidApytyMe73d4x74s90oitc8
    Export:
      Name: sls-global-employment-dev-TeamHandlerLambdaFunctionQualifiedArn
  CognitoOAuthHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref CognitoOAuthHandlerLambdaVersionPYz6vKmBYsHkLRaosODsICFv3xh24OvNvpvWOuC2s
    Export:
      Name: sls-global-employment-dev-CognitoOAuthHandlerLambdaFunctionQualifiedArn
  HandleDynamoStreamRecordsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref >-
      HandleDynamoStreamRecordsLambdaVersionzdUbBGN7IU3trkvB8fGjnu57Qj3j3SR1qgjWDZewxU
    Export:
      Name: >-
        sls-global-employment-dev-HandleDynamoStreamRecordsLambdaFunctionQualifiedArn
  BulkCognitoSignupLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref BulkCognitoSignupLambdaVersionrQLJrg1opG5O8LD7Jbdl6BXCqHQZkq6bMJ5HLbCgAXQ
    Export:
      Name: sls-global-employment-dev-BulkCognitoSignupLambdaFunctionQualifiedArn
  HandleEBSchedulerLambdaInvokeLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref >-
      HandleEBSchedulerLambdaInvokeLambdaVersionrmASWVMBMuyBmdl0ffKfGb4pUynuP2s4LyKH9an2VQ
    Export:
      Name: >-
        sls-global-employment-dev-HandleEBSchedulerLambdaInvokeLambdaFunctionQualifiedArn
  PendingApprovalsHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref >-
      PendingApprovalsHandlerLambdaVersionVvFihwrOjijjVu0pkvO2vpspXjoe94US382aNBbmoTw
    Export:
      Name: >-
        sls-global-employment-dev-PendingApprovalsHandlerLambdaFunctionQualifiedArn
  BroadcastMessageLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref BroadcastMessageLambdaVersionjfv75LdI3LWrUBUoR1IxOuCHFsijBg46T7HmdVO8svI
    Export:
      Name: sls-global-employment-dev-BroadcastMessageLambdaFunctionQualifiedArn
  WebSocketHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref WebSocketHandlerLambdaVersiontNQafWdQbjyqsPCK4ZmQc8vPNLanJuW2QkV5HKGEJI
    Export:
      Name: sls-global-employment-dev-WebSocketHandlerLambdaFunctionQualifiedArn
  GetAllWebSocketConnectionsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref >-
      GetAllWebSocketConnectionsLambdaVersionigCznxwD7Y2cqn5zSarbQspBvaapIogFif5mMS8l7Js
    Export:
      Name: >-
        sls-global-employment-dev-GetAllWebSocketConnectionsLambdaFunctionQualifiedArn
  GetAllCalendarsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref GetAllCalendarsLambdaVersion7l4zwMJYJlwsnpDkxHId0t2BqXvrO15mv8dcUroChTo
    Export:
      Name: sls-global-employment-dev-GetAllCalendarsLambdaFunctionQualifiedArn
  GoogleOauthHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref GoogleOauthHandlerLambdaVersionDS1vRjM5X80Z2jHsNPhrgFlYchjkku1FM4C781XGt4
    Export:
      Name: sls-global-employment-dev-GoogleOauthHandlerLambdaFunctionQualifiedArn
  GoogleOauthCallbackHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref >-
      GoogleOauthCallbackHandlerLambdaVersionrcgl0UQoWbMNytPK5sNLylRT68vgIM74BswF3rYM
    Export:
      Name: >-
        sls-global-employment-dev-GoogleOauthCallbackHandlerLambdaFunctionQualifiedArn
  EmployeeHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref EmployeeHandlerLambdaVersion0YYurQNWDtgwjyCxNPeR21HnJmxTLKshdN5VpbeWGLQ
    Export:
      Name: sls-global-employment-dev-EmployeeHandlerLambdaFunctionQualifiedArn
  CreateMeetingLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref CreateMeetingLambdaVersionho56xUohqzBUqnSysLXBysjc25e79dyyBmqDlDQ3Dg
    Export:
      Name: sls-global-employment-dev-CreateMeetingLambdaFunctionQualifiedArn
  SqsJobQueueInvokeHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref >-
      SqsJobQueueInvokeHandlerLambdaVersion4VeTXrvA08Zn4WVdWciLPOfvSoAoK7hgBab5HVY
    Export:
      Name: >-
        sls-global-employment-dev-SqsJobQueueInvokeHandlerLambdaFunctionQualifiedArn
  UploadSignupBulkJobLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref UploadSignupBulkJobLambdaVersion7SlsJLDmvpEmIiAThhXfNaKG2UZjDzEBjT6n5XoFP8
    Export:
      Name: sls-global-employment-dev-UploadSignupBulkJobLambdaFunctionQualifiedArn
  CompanyHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref CompanyHandlerLambdaVersionPj923voYAbSRq1gZQ2bpK0jRLbAD49PvS4iyuzgafY
    Export:
      Name: sls-global-employment-dev-CompanyHandlerLambdaFunctionQualifiedArn
  ActivitiesHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref ActivitiesHandlerLambdaVersionEWNb7KxUDivsnOpV3ETbd8HdTvzHeeO1Mc3NUNhB7AQ
    Export:
      Name: sls-global-employment-dev-ActivitiesHandlerLambdaFunctionQualifiedArn
  EmailHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref EmailHandlerLambdaVersionzElZjtAhfZA0V4KoJt7wKjvEbYK7VgrgdmrAArxlueg
    Export:
      Name: sls-global-employment-dev-EmailHandlerLambdaFunctionQualifiedArn
  ReceiveEmailHandlerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref ReceiveEmailHandlerLambdaVersionbQVjeYtkKRFEkJwGn7FhVf7i6cRbJEM4KLIwfJTw
    Export:
      Name: sls-global-employment-dev-ReceiveEmailHandlerLambdaFunctionQualifiedArn
  ImportDataLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref ImportDataLambdaVersionoKxAOA01A08NzBQKSJgI0seYOVQxSMQI7fJ6alG0Jxs
    Export:
      Name: sls-global-employment-dev-ImportDataLambdaFunctionQualifiedArn
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join
      - ""
      - - "https://"
        - !Ref ApiGatewayRestApi
        - .execute-api.
        - !Ref "AWS::Region"
        - .
        - !Ref "AWS::URLSuffix"
        - /dev
    Export:
      Name: sls-global-employment-dev-ServiceEndpoint
  ServiceEndpointWebsocket:
    Description: URL of the service endpoint
    Value: !Join
      - ""
      - - "wss://"
        - !Ref WebsocketsApi
        - .execute-api.
        - !Ref "AWS::Region"
        - .
        - !Ref "AWS::URLSuffix"
        - /dev
    Export:
      Name: sls-global-employment-dev-ServiceEndpointWebsocket
  GlobalDashemploymentDashdevDashnodejsDashdefaultLambdaLayerQualifiedArn:
    Value: >-
      arn:aws:lambda:ca-central-1:524073432557:layer:global-employment-dev-nodejs-default:2
    Export:
      Name: GlobalDashemploymentDashdevDashnodejsDashdefaultLambdaLayerQualifiedArn
